@page "/Transaction"
@using UTracker.Models
@inject UserService UserService
@inject NavigationManager NavigationManager

<!-- Transaction Amounts -->
<div class="calculations">
    <div class="dashboard-box">
        <h2>@TotalBalance.ToString("C")</h2> <!-- Total Balance -->
        <p>Total Balance</p>
    </div>
    <div class="dashboard-box">
        <h2>@TotalInflow.ToString("C")</h2> <!-- Total Inflow -->
        <p>Total Inflow</p>
    </div>
    <div class="dashboard-box">
        <h2>@TotalOutflow.ToString("C")</h2> <!-- Total Outflow -->
        <p>Total Outflow</p>
    </div>
</div>

<!-- Search Bar -->
<div class="form-group">
    <label for="search">Search Transactions</label>
    <InputText id="search" class="form-control" @bind-Value="SearchTerm" />
</div>

<!-- Filter -->
<h3>Filter Transactions</h3>
<div class="row">
    <!-- Type -->
    <div class="col-md-3">
        <label for="filterTransactionType">Transaction Type</label>
        <InputSelect id="filterTransactionType" class="form-control" @bind-Value="filterTransactionType">
            <option value="">All</option>
            <option value="Debit">Debit</option>
            <option value="Credit">Credit</option>
        </InputSelect>
    </div>

    <!-- Tag -->
    <div class="col-md-3">
        <label for="filterTag">Tag</label>
        <InputSelect id="filterTag" class="form-control" @bind-Value="filterTag">
            <option value="">All</option>
            <option value="Monthly">Monthly</option>
            <option value="Salary">Salary</option>
            <option value="Rent">Rent</option>
            <option value="Groceries">Groceries</option>
            <option value="Self-care">Self-care</option>
            <option value="Other">Other</option>
        </InputSelect>
    </div>

    <!-- Sort by title -->
    <div class="col-md-3">
        <label for="filterTitle">Sort by Title</label>
        <InputSelect id="filterTitle" class="form-control" @bind-Value="filterTitleOrder">
            <option value="Ascending">Ascending</option>
            <option value="Descending">Descending</option>
        </InputSelect>
    </div>

    <!-- Date Range -->
    <div class="col-md-3">
        <label for="filterDateRange">Date Range</label>
        <div class="d-flex">
            <InputDate id="filterStartDate" class="form-control me-2" @bind-Value="filterStartDate" />
            <InputDate id="filterEndDate" class="form-control" @bind-Value="filterEndDate" />
        </div>
    </div>
</div>
<button class="btn btn-primary mt-3" @onclick="ApplyFilters">Apply Filters</button> <!-- Filter button -->
<button class="btn btn-secondary mt-3 ms-2" @onclick="ClearFilters">Clear Filters</button> <!-- Clear filter button -->

<hr />

<!-- Transaction History -->
<h3>Transaction History</h3>
@if (filteredTransactions.Any())
{
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Title</th>
                <th>Transaction Type</th>
                <th>Amount</th>
                <th>Date</th>
                <th>Category</th>
                <th>Notes</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var trans in filteredTransactions)
            {
                <tr class="@GetTransactionRowClass(trans.TransactionType)">
                    <td>@trans.Title</td>
                    <td>@trans.TransactionType</td>
                    <td>@trans.Amount</td>
                    <td>@trans.Date.ToShortDateString()</td>
                    <td>@trans.Category</td>
                    <td>@trans.Notes</td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => DeleteTransaction(trans)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No transactions available.</p>
}

<!-- Add Transactions -->
<h3>Add Transaction</h3>

<div class="alert alert-success" style="display:@(string.IsNullOrEmpty(successMessage) ? "none" : "block")">
    @successMessage
</div>

<div class="alert alert-danger" style="display:@(string.IsNullOrEmpty(errorMessage) ? "none" : "block")">
    @errorMessage
</div>

<EditForm Model="@transaction" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <!-- Title -->
    <div class="form-group">
        <label for="title">Title</label>
        <InputText id="title" class="form-control" @bind-Value="transaction.Title" />
    </div>

    <!-- Type -->
    <div class="form-group">
        <label for="transactionType">Transaction Type</label>
        <InputSelect id="transactionType" class="form-control" @bind-Value="transaction.TransactionType">
            <option value="Type Option">Select Transaction Type</option>
            <option value="Debit">Debit</option>
            <option value="Credit">Credit</option>
        </InputSelect>
    </div>

    <!-- Amount -->
    <div class="form-group">
        <label for="amount">Amount</label>
        <InputNumber id="amount" class="form-control" @bind-Value="transaction.Amount" />
    </div>

    <!-- Date -->
    <div class="form-group">
        <label for="date">Date</label>
        <InputDate id="date" class="form-control" @bind-Value="transaction.Date" />
    </div>

    <!-- Tag -->
    <div class="form-group">
        <label for="tag">Tag</label>
        <InputSelect id="category" class="form-control" @bind-Value="transaction.Category">
            <option value="Tag">Tag</option>
            <option value="Monthly">Monthly</option>
            <option value="Salary">Salary</option>
            <option value="Rent">Rent</option>
            <option value="Groceries">Groceries</option>
            <option value="Self-care">Self-care</option>
            <option value="Other">Other</option>
        </InputSelect>
    </div>

    <!-- Notes -->
    <div class="form-group">
        <label for="notes">Notes</label>
        <InputTextArea id="notes" class="form-control" @bind-Value="transaction.Notes" />
    </div>

    <!-- Buttons -->
    <button type="submit" class="btn btn-primary">Add Transaction</button>
    <button type="button" class="btn btn-secondary" @onclick="ResetForm">Reset</button>
    <button type="button" class="btn btn-danger" @onclick="DeleteAllTransactions">Delete All Transactions</button>

</EditForm>

<hr />

@code {
    private string filterTransactionType = string.Empty;
    private string filterTag = string.Empty;
    private string filterTitleOrder = "Ascending";
    private DateTime? filterStartDate = null;
    private DateTime? filterEndDate = null;
    private List<TransactionsDB> transactions = new();
    private List<TransactionsDB> filteredTransactions = new();
    private TransactionsDB transaction = new TransactionsDB();
    private string successMessage = string.Empty;
    private string errorMessage = string.Empty;

    private decimal TotalInflow = 0;
    private decimal TotalOutflow = 0;
    private decimal TotalBalance => TotalInflow - TotalOutflow;

    private string searchTerm;

    // Search Bar Filtering
    private string SearchTerm
    {
        get => searchTerm;
        set
        {
            searchTerm = value;
            FilterTransactions();
        }
    }

    // Transaction Filtering
    private void FilterTransactions()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredTransactions = new List<TransactionsDB>(transactions); // Show all transactions
        }
        else
        {
            filteredTransactions = transactions
                .Where(t => t.Title != null && t.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }

    // Load Transactions
    protected override async Task OnInitializedAsync()
    {
        await LoadTransactions();
    }

    // Calculationg totals and applying filters
    private async Task LoadTransactions()
    {
        transactions = await UserService.GetAllTransactions();
        CalculateTotals();
        ApplyFilters();
    }

    // Apply Filters
    private void ApplyFilters()
    {
        filteredTransactions = transactions
            .Where(t =>
                (string.IsNullOrEmpty(filterTransactionType) || t.TransactionType == filterTransactionType) &&
                (string.IsNullOrEmpty(filterTag) || t.Category == filterTag) &&
                (!filterStartDate.HasValue || t.Date >= filterStartDate.Value) &&
                (!filterEndDate.HasValue || t.Date <= filterEndDate.Value))
            .ToList();

        filteredTransactions = filterTitleOrder switch
        {
            "Ascending" => filteredTransactions.OrderBy(t => t.Title).ToList(),
            "Descending" => filteredTransactions.OrderByDescending(t => t.Title).ToList(),
            _ => filteredTransactions
        };
    }

    // Clear Filters
    private void ClearFilters()
    {
        filterTransactionType = string.Empty;
        filterTag = string.Empty;
        filterTitleOrder = "Ascending";
        filterStartDate = null;
        filterEndDate = null;
        ApplyFilters();
    }

    // Handle Submits
    private async Task HandleValidSubmit()
    {
        if (transaction.TransactionType == "Debit" && transaction.Amount > TotalInflow)
        {
            await DisplayErrorMessage("Error: Debit amount exceeds available credit.");
            return;
        }

        if (transaction.TransactionType == "Debit")
            TotalOutflow += transaction.Amount;
        else if (transaction.TransactionType == "Credit")
            TotalInflow += transaction.Amount;

        await UserService.AddTransaction(transaction);
        await LoadTransactions();
        transaction = new TransactionsDB();
        await DisplaySuccessMessage("Transaction successfully added!");
    }

    // Reset Form
    private void ResetForm()
    {
        transaction = new TransactionsDB();
    }

    // Delete Single Transaction
    private async Task DeleteTransaction(TransactionsDB transaction)
    {
        try
        {
            var result = await UserService.DeleteTransaction(transaction); // Delete from database

            if (result > 0) // Check if the deletion was successful
            {
                transactions.Remove(transaction);
                filteredTransactions.Remove(transaction); // Remove from the filtered list
                CalculateTotals(); // Update totals after deletion
                await DisplaySuccessMessage("Transaction deleted successfully!");
            }
            else
            {
                await DisplayErrorMessage("Transaction could not be deleted.");
            }
        }
        catch (Exception ex)
        {
            await DisplayErrorMessage($"Failed to delete transaction: {ex.Message}");
            Console.WriteLine($"Exception: {ex}");
        }
    }

    // Delete all transactions
    private async Task DeleteAllTransactions()
    {
        var result = await UserService.DeleteAllTransactions();
        if (result > 0)
        {
            await DisplaySuccessMessage("All transactions have been deleted!");
            await LoadTransactions();
        }
        else
        {
            await DisplayErrorMessage("No transactions found to delete.");
        }
    }

    // Get Transaction Type
    private string GetTransactionRowClass(string transactionType) =>
        transactionType switch
        {
            "Debit" => "table-danger",
            "Credit" => "table-success",
            _ => ""
        };

    // Display Sucess Message
    private async Task DisplaySuccessMessage(string message)
    {
        successMessage = message;
        StateHasChanged();
        await Task.Delay(3000);
        successMessage = string.Empty;
        StateHasChanged();
    }

    // Display Error Message
    private async Task DisplayErrorMessage(string message)
    {
        errorMessage = message;
        StateHasChanged();
        await Task.Delay(3000);
        errorMessage = string.Empty;
        StateHasChanged();
    }

    // Calcuate Totals
    private void CalculateTotals()
    {
        TotalInflow = transactions.Where(t => t.TransactionType == "Credit").Sum(t => t.Amount);
        TotalOutflow = transactions.Where(t => t.TransactionType == "Debit").Sum(t => t.Amount);
    }
}

@page "/Debt"
@using UTracker.Models
@inject UserService UserService
@inject NavigationManager NavigationManager

<style>
    body {
        background-image: url('/assets/moneyy.jpg');
    }
</style>

<h3>Debt</h3>
<!-- Debt Amounts -->
<div class="debt-calculations">
    <div class="dashboard-box">
        <h2>@TotalBalance.ToString("C")</h2>
        <p>Total Balance</p>
    </div>
    <div class="dashboard-box">
        <h2>@TotalDebt.ToString("C")</h2>
        <p>Total Debt</p>
    </div>
    <div class="dashboard-box">
        <h2>@TotalClearedDebt.ToString("C")</h2>
        <p>Total Cleared Debt</p>
    </div>
    <div class="dashboard-box">
        <h2>@RemainingDebt.ToString("C")</h2>
        <p>Remaining Debt</p>
    </div>
</div>

<!-- Debt History -->
<h3>Debt History</h3>

<!-- Pending Debts -->
<h4>Pending Debt</h4>
@if (debts.Any())
{
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Debt Source</th>
                <th>Debt Amount</th>
                <th>Cleared Amount</th>
                <th>Due Date</th>
                <th>Notes</th>
                <th>Clear Debt</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var debt in debts)
            {
                <tr>
                    <td>@debt.DebtSource</td>
                    <td>@debt.DebtAmount</td>
                    <td>@debt.ClearedAmount</td>
                    <td>@debt.DueDate.ToShortDateString()</td>
                    <td>@debt.Notes</td>
                    <td>
                        <button class="btn btn-success" @onclick="() => ClearDebt(debt)">Clear Debt</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No debts available.</p>
}

<!-- Cleared Debts -->
<h4>Cleared Debt</h4>
@if (clearedDebts.Any())
{
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Debt Source</th>
                <th>Debt Amount</th>
                <th>Due Date</th>
                <th>Notes</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var debt in clearedDebts)
            {
                <tr>
                    <td>@debt.DebtSource</td>
                    <td>@debt.DebtAmount</td>
                    <td>@debt.DueDate.ToShortDateString()</td>
                    <td>@debt.Notes</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No cleared debts available.</p>
}

<br>

<!-- Add Debt -->
<h3>Add Debt</h3>

<EditForm Model="@debt" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <!-- Source-->
    <div class="form-group">
        <label for="debtSource">Debt Source</label>
        <InputText id="debtSource" class="form-control" @bind-Value="debt.DebtSource" />
    </div>

    <!-- Amount -->
    <div class="form-group">
        <label for="debtAmount">Debt Amount</label>
        <InputNumber id="debtAmount" class="form-control" @bind-Value="debt.DebtAmount" />
    </div>

    <!-- Cleared Debt Amount -->
    <div class="form-group">
        <label for="clearedAmount">Cleared Amount</label>
        <InputNumber id="clearedAmount" class="form-control" @bind-Value="debt.ClearedAmount" />
    </div>

    <!-- Due Date -->
    <div class="form-group">
        <label for="dueDate">Due Date</label>
        <InputDate id="dueDate" class="form-control" @bind-Value="debt.DueDate" />
    </div>

    <!-- Notes -->
    <div class="form-group">
        <label for="notes">Notes</label>
        <InputTextArea id="notes" class="form-control" @bind-Value="debt.Notes" />
    </div>

    <button type="submit" class="btn btn-primary">Add Debt</button> <!-- Submit Button -->
    <button type="button" class="btn btn-secondary" @onclick="ResetForm">Reset</button> <!-- Reset Button -->
</EditForm>

<hr />

@code {
    private DebtDB debt = new DebtDB();
    private List<DebtDB> debts = new List<DebtDB>();
    private List<TransactionsDB> transactions = new();
    private List<ClearedDB> clearedDebts = new List<ClearedDB>();

    private string errorMessage = string.Empty;

    // Amount Calculations
    private decimal TotalDebt => debts.Sum(d => d.DebtAmount);
    private decimal TotalClearedDebt => debts.Sum(d => d.ClearedAmount);
    private decimal RemainingDebt => TotalDebt - TotalClearedDebt;
    private decimal TotalInflow = 0;
    private decimal TotalOutflow = 0;
    private decimal TotalBalance => TotalInflow - TotalOutflow;

    protected override async Task OnInitializedAsync()
    {
        await LoadTransactions();
        await LoadDebts();
        CalculateTotals();
        await LoadClearedDebts();
    }

    // Load Debts
    private async Task LoadDebts()
    {
        debts = await UserService.GetAllDebts();
    }

    // Load Cleared Debts
    private async Task LoadClearedDebts()
    {
        clearedDebts = await UserService.GetAllClearedDebts();
    }

    // Load Transactions
    private async Task LoadTransactions()
    {
        transactions = await UserService.GetAllTransactions();
    }

    // Handle Valid Submmits
    private async Task HandleValidSubmit()
    {
        try
        {
            await UserService.DebtDB(debt);
            await LoadDebts();
            await LoadClearedDebts();
            debt = new DebtDB();
            await DisplaySuccessMessage("Debt successfully added!");
        }
        catch (Exception ex)
        {
            errorMessage = $"An error has occurred: {ex.Message}";
            Console.WriteLine(ex); // Log the error for debugging
        }
    }

    // Clear Debt
    private async Task ClearDebt(DebtDB debtToClear)
    {
        // Calculate the amount needed to clear the debt
        var amountToClear = debtToClear.DebtAmount - debtToClear.ClearedAmount;

        // Validate if there's enough balance
        if (amountToClear > TotalBalance)
        {
            errorMessage = "Debt cannot be cleared. Not enough credit.";
            return;
        }

        try
        {
        // Create a ClearedDB object from DebtDB
        var clearedDebt = new ClearedDB
            {
                DebtSource = debtToClear.DebtSource,
                DebtAmount = debtToClear.DebtAmount,
                DueDate = DateTime.Now,
                Notes = debtToClear.Notes
            };

        // Add the cleared debt to the cleared table
        await UserService.AddClearedDebt(clearedDebt);

        // Remove the debt from pending debts
        await UserService.DeleteDebt(debtToClear.Id);

        // Reload debts
        await LoadDebts();
        await LoadClearedDebts();

        // Recalculate totals
        CalculateTotals();

        // Display success message
        await DisplaySuccessMessage("Debt successfully cleared!");
    }
    catch (Exception ex)
    {
        errorMessage = $"An error occurred while clearing debt: {ex.Message}";
        Console.WriteLine(ex); // Log for debugging
    }
}


    // Display Sucess Message
    private async Task DisplaySuccessMessage(string message)
    {
        await Task.Run(() => Console.WriteLine(message)); // Simulate pop-up for now
    }

    // Reset Debt Form
    private void ResetForm()
    {
        debt = new DebtDB();
    }

    // Calculate Totals
    private void CalculateTotals()
    {
        TotalInflow = transactions.Where(t => t.TransactionType == "Credit").Sum(t => t.Amount);
        TotalOutflow = transactions.Where(t => t.TransactionType == "Debit").Sum(t => t.Amount);
    }
}

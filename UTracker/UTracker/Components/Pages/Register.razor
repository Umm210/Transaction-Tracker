@page "/register"
@using SQLite
@using UTracker.Models;
@inject UserService UserService
@inject NavigationManager NavigationManager

<style>
    body {
        background-image: url('/assets/moneyy.jpg');
    }
</style>

<div class="register-container">
    <div class="register-box">
        <h3>Register</h3>

        <div class="form-group">
            <label>Username:</label>
            <input @bind="Username" placeholder="Enter username" />
        </div>
        <div class="form-group">
            <label>Email:</label>
            <input @bind="Email" type="email" placeholder="Enter email" />
        </div>
        <div class="form-group">
            <label>Password:</label>
            <input @bind="Password" type="password" placeholder="Enter password" />
        </div>
        <div>
            <label>Currency Type:</label>
            <select @bind="CurrencyType">
                <option value="USD">USD</option>
                <option value="EUR">EUR</option>
                <option value="GBP">GBP</option>
            </select>
        </div>
        <button @onclick="RegisterUser" class="register-button">Register</button>

        <p>Don't have an account? <a href="/" style="color: white">Login</a></p>
    </div>
</div>



@if (SuccessMessage != null)
{
    <p style="color: green;">@SuccessMessage</p>
}
@if (ErrorMessage != null)
{
    <p style="color: red;">@ErrorMessage</p>
}

@code {
    private string Username;
    private string Email;
    private string Password;
    private string CurrencyType = "USD";
    private string? SuccessMessage;
    private string? ErrorMessage;
    private string? TotalBalance;
    private string? TotalInflow;
    private string? TotalOutflow;

    private async Task RegisterUser()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(Username) || string.IsNullOrWhiteSpace(Email) || string.IsNullOrWhiteSpace(Password))
            {
                ErrorMessage = "All fields are required!";
                return;
            }

            var user = new User
                {
                    Username = Username,
                    Email = Email,
                    Password = Password,
                    CurrencyType = CurrencyType,
                    TotalBalance = TotalBalance,
                    TotalInflow = TotalInflow,
                    TotalOutflow = TotalOutflow
                };

            await UserService.RegisterUser(user);
            SuccessMessage = "Registration successful!";
            ErrorMessage = null;

            // Redirect to login page after a short delay
            await Task.Delay(2000);
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error: {ex.Message}";
            SuccessMessage = null;
        }
    }
}

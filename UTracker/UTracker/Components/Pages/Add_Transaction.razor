@page "/AddTransaction"
@using UTracker.Models
@inject UserService UserService
@inject NavigationManager NavigationManager


<h3>Transaction Summary</h3>
@if (transactions.Any())
{
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Title</th>
                <th>Transaction Type</th>
                <th>Amount</th>
                <th>Date</th>
                <th>Category</th>
                <th>Notes</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var trans in transactions)
            {
                <tr class="@GetTransactionRowClass(trans.TransactionType)">
                    <td>@trans.Title</td>
                    <td>@trans.TransactionType</td>
                    <td>@trans.Amount</td>
                    <td>@trans.Date.ToShortDateString()</td>
                    <td>@trans.Category</td>
                    <td>@trans.Notes</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No transactions available.</p>
}

<br>

<h3>Add Transaction</h3>

<!-- Success/Error message display -->
<div class="alert alert-success" style="display:@(string.IsNullOrEmpty(successMessage) ? "none" : "block")">
    @successMessage
</div>

<div class="alert alert-danger" style="display:@(string.IsNullOrEmpty(errorMessage) ? "none" : "block")">
    @errorMessage
</div>

<EditForm Model="@transaction" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="title">Title</label>
        <InputText id="title" class="form-control" @bind-Value="transaction.Title" />
    </div>

    <div class="form-group">
        <label for="transactionType">Transaction Type</label>
        <InputSelect id="transactionType" class="form-control" @bind-Value="transaction.TransactionType">
            <option value="Type Option">Select Transaction Type</option>
            <option value="Debit">Debit</option>
            <option value="Credit">Credit</option>
        </InputSelect>
    </div>

    <div class="form-group">
        <label for="amount">Amount</label>
        <InputNumber id="amount" class="form-control" @bind-Value="transaction.Amount" />
    </div>

    <div class="form-group">
        <label for="date">Date</label>
        <InputDate id="date" class="form-control" @bind-Value="transaction.Date" />
    </div>

    <div class="form-group">
        <label for="category">Category</label>
        <InputSelect id="category" class="form-control" @bind-Value="transaction.Category">
            <option value="Category">Category</option>
            <option value="Monthly">Monthly</option>
            <option value="Salary">Salary</option>
            <option value="Rent">Rent</option>
            <option value="Groceries">Groceries</option>
            <option value="Self-care">Self-care</option>
            <option value="Other">Other</option>
        </InputSelect>
    </div>

    <div class="form-group">
        <label for="notes">Notes</label>
        <InputTextArea id="notes" class="form-control" @bind-Value="transaction.Notes" />
    </div>

    <button type="submit" class="btn btn-primary">Add Transaction</button>
    <button type="button" class="btn btn-secondary" @onclick="ResetForm">Reset</button>
    <button type="button" class="btn btn-danger" @onclick="DeleteAllTransactions">Delete All Transactions</button>

</EditForm>

<hr />



@code {

    private AddTransaction transaction = new AddTransaction();
    private List<AddTransaction> transactions = new();

    private decimal totalCashInflow = 0;
    private decimal totalCashOutflow = 0;

    private void CalculateTotals()
    {
        totalCashInflow = transactions.Where(t => t.TransactionType == "Credit").Sum(t => t.Amount);
        totalCashOutflow = transactions.Where(t => t.TransactionType == "Debit").Sum(t => t.Amount);
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadTransactions();
    }

    private async Task LoadTransactions()
    {
        transactions = await UserService.GetAllTransactions();
    }


    //debit and credit initialization
    private decimal totalCredit = 0;  
    private decimal totalDebit = 0;   


    // submit validation
    private async Task HandleValidSubmit()
    {
        if (transaction.TransactionType == "Debit")
        {
            // Validate if debit exceeds total credit
            if (transaction.Amount > totalCredit)
            {
                await DisplayErrorMessage("Error: Debit amount exceeds available credit.");
                return; // Prevent the transaction from being added
            }

            totalDebit += transaction.Amount; // Add to total debit
        }
        else if (transaction.TransactionType == "Credit")
        {
            totalCredit += transaction.Amount; // Add to total credit
        }

        await UserService.AddTransaction(transaction);
        await LoadTransactions();
        transaction = new AddTransaction();
        await DisplaySuccessMessage("Transaction successfully added!");
    }

    // success and error message inintialization
    private string successMessage = string.Empty;
    private string errorMessage = string.Empty;
    
    //success message  handling
    private async Task DisplaySuccessMessage(string message)
    {
        successMessage = message;
        StateHasChanged();
        await Task.Delay(3000); // Show for 3 seconds
        successMessage = string.Empty;
        StateHasChanged();
    }

    // error message handling
    private async Task DisplayErrorMessage(string message)
    {
        errorMessage = message;
        StateHasChanged();
        await Task.Delay(3000); // Show for 3 seconds
        errorMessage = string.Empty;
        StateHasChanged();
    }


    //form reset validation
    private void ResetForm()
    {
        transaction = new AddTransaction();
    }

    // transaction deletion
    private async Task DeleteAllTransactions()
    {
        var result = await UserService.DeleteAllTransactions();
        if (result > 0)
        {
            await DisplaySuccessMessage("All transactions have been deleted!");
            await LoadTransactions(); // Reload the transaction list after deletion
        }
        else
        {
            await DisplayErrorMessage("No transactions found to delete.");
        }
    }

    private string GetTransactionRowClass(string transactionType)
    {
        if (transactionType == "Debit")
            return "table-danger"; // Bootstrap class for red (danger)
        else if (transactionType == "Credit")
            return "table-success"; // Bootstrap class for green (success)
        return "";
    }


} 